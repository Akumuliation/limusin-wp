!function(){$(function(){$(".popup").each(function(){new o($(this))})});var o=function(o){var n=this,i=40,t=$(".popup__open"),e=o,p=e.find(".popup__close, .popup__cancel"),c=e.find(".popup__wrap"),s=e.find(".popup__content"),u=$("html"),d=$(window),f=setTimeout(function(){},1),l=function(){d.height()-2*i-c.height()>0?c.css({top:(d.height()-2*i-c.height())/2}):c.css({top:0})},a=function(){$("html").niceScroll(),e.css({overflow:"hidden"}),u.css({paddingRight:0}),e.removeClass("popup_opened"),e.addClass("popup_hide"),f=setTimeout(function(){e.css({overflow:""}),e.removeClass("popup_hide")},300)},r=function(){e[0].obj=n,h()},h=function(){d.on({resize:function(){l()}}),t.on({click:function(){return _($(this).attr("data-popup"),$(this).attr("data-video")),!1}}),c.on({click:function(o){o.stopPropagation()}}),e.on({click:function(){return a(),!1}}),p.on({click:function(){return a(),n.closeVideo(),!1}})},_=function(o,i){v(o),$("html").getNiceScroll().remove(),i?n.initVideo():"",u.css({overflow:"hidden"}),e.addClass("popup_opened"),l()},v=function(o){var n=s.filter(".popup__"+o);s.css({display:"none"}),n.css({display:"flex"})};n.initVideo=function(){video.play()},n.closeVideo=function(){video.pause()},r()}}();
!function(){$(function(){$("select").each(function(){new e({obj:$(this),optionType:1,showType:2})})});var e=function(e){var t,i,n=this,o=e.obj,s=e.optionType||0,c=e.showType||0,a=e.visible||5,l=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),d=$('<span class="websters-select__item"></span>'),p=$('<div class="websters-select"></div>'),r=$(window),f=$("body"),u=!1,h=function(){var e="";o.css({opacity:0}),o.wrap(p),p=o.parent(),p.append('<div class="websters-select__arrow"></div>'),o.before(d),o.find("option").each(function(){var t=$(this);"selected"==t.attr("selected")&&(e=t.text())}),""==e&&(e=o.find("option").eq(0).text()),d.text(e)},v=function(){u=!1,c?1==c?t.stop(!0,!1).slideUp(300,function(){t.remove()}):2==c&&t.stop(!0,!1).fadeOut(300,function(){t.remove()}):t.css({display:"none"}),p.removeClass("websters-select_opened")},b=function(){o[0].obj=n,h(),g(),w()},w=function(){o.on("change",function(){d.text($(this).find("option:selected").text())}),1!=s||l||(p.on({click:function(e){e.stopPropagation(),u?v():m()}}),r.on({click:function(){u&&v()}}))},g=function(){!s||l?y():1==s&&_()},_=function(){p.addClass("websters-select_custom")},y=function(){p.addClass("websters-select_mobile")},m=function(){var e=$("select"),n=$("<ul></ul>"),s=(r.scrollTop(),p.offset()),l=0,d=o.find("option:selected").index(),h=Math.round(1e3*Math.random());e.each(function(){this!==o[0]&&this.obj.checkOpened()&&this.obj.close()}),u&&t.remove(),u=!0,t=$('<div class="websters-select__popup" id="websters-select__popup'+h+'"></div>'),o.find("option").each(function(e){var t=$(this);e==d?n.append('<li class="active">'+t.text()+"</li>"):n.append("<li>"+t.text()+"</li>")}),t.append(n),f.append(t),p.addClass("websters-select_opened"),t.css({width:p.outerWidth(),left:s.left,top:s.top+p.outerHeight()}),l=t.outerHeight(),l>t.find("li").eq(0).outerHeight()*a&&(t.height(t.find("li").eq(0).outerHeight()*a),i=t.niceScroll({horizrailenabled:!1})),1==c?(t.css({display:"none"}),t.slideDown(300)):2==c&&(t.css({opacity:.1}),t.animate({opacity:1},300)),t.find("li").on({click:function(e){var t=$(this).index();e.stopPropagation(),o.val(o.find("option").eq(t).attr("value")),o.trigger("change"),v()}})};n.checkOpened=function(){return u},n.close=function(){v()},b()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
